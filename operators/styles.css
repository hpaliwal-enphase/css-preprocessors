/*
This is standard mixin, helps to centralize group of redudant styles
*/
/*
  This is function style mixin, which takes in arguments, optionally assigns them default values, and may contain if-else logic as well
  */
.text1 {
  margin-bottom: 3rem;
  padding: 2rem;
  color: rgb(2, 77, 13);
  font-family: "Courier New", Courier, monospace;
  font-size: 1.75rem;
}

.text2 {
  margin-bottom: 3rem;
  padding: 2rem;
  color: rgb(141, 128, 4);
  font-family: "Franklin Gothic Medium", "Arial Narrow", Arial, sans-serif;
  font-size: 1.75rem;
}

.text3 {
  margin-bottom: 3rem;
  padding: 2rem;
  background-color: aqua;
  border: 1px solid black;
  color: rgb(239, 125, 3);
  font-family: Impact, Haettenschweiler, "Arial Narrow Bold", sans-serif;
  font-size: 1.75rem;
}

.text4 {
  margin-bottom: 3rem;
  padding: 2rem;
  color: rgb(104, 1, 11);
  font-family: cursive;
  font-size: 1.75rem;
}

.text5 {
  margin-bottom: 3rem;
  padding: 2rem;
  color: rgb(132, 32, 255);
  font-family: fantasy;
  font-size: 1.75rem;
}

/**
    This is an example of nesting. Saves us from having to write redundant code like div h1 {...} and div h2 {...} in order to select certain child components/classes. 
*/
div h1 {
  margin-bottom: 3rem;
  padding: 2rem;
  color: rgb(254, 113, 132);
  font-family: "Trebuchet MS", "Lucida Sans Unicode", "Lucida Grande", "Lucida Sans", Arial, sans-serif;
}
div h2 {
  margin-bottom: 3rem;
  padding: 2rem;
  color: rgb(54, 67, 99);
  font-family: "Trebuchet MS", "Lucida Sans Unicode", "Lucida Grande", "Lucida Sans", Arial, sans-serif;
}

/**
Nesting basically introduces a space in parent and child after compiling, if we need to remove space for examples like h1:hover, we use '&'
*/
section h1 {
  margin-bottom: 3rem;
  padding: 2rem;
  color: rgb(151, 174, 102);
  font-family: "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS", sans-serif;
}
section h1:hover {
  background-color: bisque;
}

.div-container, .section-container {
  border: 0.2rem solid black;
  border-radius: 1rem;
  box-shadow: 0.1rem 0.1rem 1rem rgba(0, 0, 0, 0.5);
  font-style: italic;
}

/**
 Inheritance is similar to std mixins; nbut mixins are generally used for many component-wide usage. For 2-3 component style sharing, inheritance is a good choice.
*/
.section-container {
  text-shadow: 0.1rem 0.1rem 1rem rgba(0, 0, 0, 0.75);
  font-style: normal;
}

/**
    We can perform operations in scss like in normal programming, this can help in making styles more progressive and robust. Resultant css contains computed value.
*/
.text6 {
  margin-bottom: 3rem;
  padding: 2rem;
  color: rgb(255, 0, 255);
  font-family: Cambria, Cochin, Georgia, Times, "Times New Roman", serif;
  width: 36.5617433414%;
}/*# sourceMappingURL=styles.css.map */